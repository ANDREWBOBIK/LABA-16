                                                                                                Варіант 9
Завдання 1


#include <stdio.h>
#define N 3 
int main() {
    float matrix[N][N];
    float L = 0;
    printf("Vvedite Element matricu %dx%d\n", N, N);
    for (int i = 0; i < N; ++i) {
        float M = matrix[0][i] * (matrix[1][(i + 1) % N] * matrix[2][(i + 2) % N] - matrix[1][(i + 2) % N] * matrix[2][(i + 1) % N]);
        L += (i % 2 == 0 ? 1 : -1) * M;
        for (int j = 0; j < N; ++j) {
            printf("Element [%d][%d]: ", i + 1, j + 1);
            scanf_s("%f", &matrix[i][j]);
        }
    }
    printf("Vuznachnuk matricu: %f\n", L);
    return 0;
}



Завдання 2


#include <stdio.h>
#include <stdlib.h>
int main() {
    int N;
    printf("Enter the size N (N <= 10): ");
    scanf_s("%d", &N);
    if (N > 10) {
        printf("N ne povuna bytu >= 10.\n");
        return 1;
    }
    int x, y;
    printf("vvedite chuslo r9dkov ");
    scanf_s("%d", &x);
    printf("vvedite chuslo stolbikov: ");
    scanf_s("%d", &y);
    int** matrix = (int**)malloc(x * sizeof(int*));
    for (int i = 0; i < x; ++i) {
        matrix[i] = (int*)malloc(y * sizeof(int));
    }
    printf("vvedit elementu matricu\n");
    for (int i = 0; i < x; ++i) {
        for (int j = 0; j < y; ++j) {
            printf("Elements [%d][%d]: ", i, j);
            scanf_s("%d", &matrix[i][j]);
        }
    }
    float* sumVector = (float*)malloc(x * sizeof(float));
    for (int i = 0; i < x; ++i) {
        sumVector[i] = (matrix[i], y);
    }
    printf("Vector of sums of matrix row elements:\n");
    for (int i = 0; i < x; ++i) {
        printf("%.2f ", sumVector[i]);
    }
    for (int i = 0; i < x; ++i) {
        return 0;
    }
}




завдання 3



#include <stdio.h>
int isMagicSquare(int matrix[4][4]);
int main() {
    int matrix[4][4];
    printf("vvedit Elementu matricu 4x4:\n");
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            printf("elements [%d][%d]: ", i, j);
            scanf_s("%d", &matrix[i][j]);
        }
    }
    if (isMagicSquare(matrix)) {
        printf("matrix e magickkvadratom.\n");
    }
    else {
        printf("matrix ne e magickkvadratom.\n");
    }
    return 0;
}
int isMagicSquare(int matrix[4][4]) {

    return 0;
}





Завдання 4



#include <stdio.h>
#include <stdlib.h>
void fillSnakeMatrix(int** matrix, int M, int N) {
    int counter = 1;
    for (int i = 0; i < M; i++) {
        matrix[i] = (int*)malloc(N * sizeof(int));
        if (i % 2 == 0) {
            for (int j = 0; j < N; j++) {
                matrix[i][j] = counter++;
            }
        }
        else {
            for (int j = N - 1; j >= 0; j--) {
                matrix[i][j] = counter++;
            }
        }
    }
}
void printMatrix(int** matrix, int M, int N) {
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            printf("%3d ", matrix[i][j]);
        }
        printf("\n");
    }
}
void freeMatrix(int** matrix, int M) {
    for (int i = 0; i < M; i++) {
        free(matrix[i]);
    }
    free(matrix);
}
int main() {
    int M, N;
    printf("Enter the number of rows (M): ");
    scanf_s("%d", &M);
    printf("Enter the number of columns (N): ");
    scanf_s("%d", &N);
    int** matrix = (int**)malloc(M * sizeof(int*));
    fillSnakeMatrix(matrix, M, N);
    printf("Matrix filled in 'snake' pattern:\n");
    printMatrix(matrix, M, N);
    freeMatrix(matrix, M);
    return 0;
